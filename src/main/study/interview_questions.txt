1. Difference between Spring and SpringBoot.
2. Difference betweeen List and Set.
3. Difference between hashmap and hashset.
4. Explain @EnableAutoConfiguration.
5. Explain difference between @Service, @Repository and @Entity.
6. What are different types of design patterns.
7. Give examples of practical implementation of Singleton pattern.
8. Give examples of practical implementation of Builder pattern.
9. Write a singleton class.
10. How do we handle exceptions in Java.
11. How can we avoid executing finally block.
12. How can we customize @AutoConfiguration implementation.
14. Limitations of Hashmap.
15. Programming: Print the first top 5 & top 10 repeated words in descending order from the given paragraph.
    Sample Input: Sunset is the time of day when our sky meets the outer space solar winds. There are blue, pink, and purple swirls, spinning and twisting, like clouds of balloons caught in a whirlwind. The sun moves slowly to hide behind the line of horizon, while the moon races to take its place in prominence atop the night sky. People slow to a crawl, entranced, fully forgetting the deeds that must still be done. There is a coolness, a calmness, when the sun does set.
    Output:
16. Difference between PermGen vs MetaSpace memory structure.
17. How does stream() work?
18. Which is the most important principle in SOLID and why?
19. Difference between design patterns and design principles.
20. Give some examples where design patterns are implemented based on/using design principles.
21. Difference between HashSet and TreeSet.
22. How TreeSet works internally.
23. Difference between Inheritance and Composition.
24. Design a tinyurl system with high availability and scalability.
25. How will you design a system for notifying different set of subscribers separately for a huge stream
    of incoming news?
26. Difference between @Qualifier and @Autowired annotations.
27. Can we use objects of a custom Employee class as keys in a HashMap implementation?
        Structure of Employee class is-
        public class Employee {
            private String name;
            private int age;
            private String designation;
            private String department;
            private double salary;
        }
28. In above question what conditions Employee class must satisfy to be able to use as key in a HashMap?
29. What if only hashCode is overridden but not equals? Also explain answer for vice-versa condition.
30. Explain State machine algorithm?
31. How do you implement a logic where second thread checks if first thread has completed it's operation or not, if not it should
       stop the first thread and then start executing.
32. How do you debug in a multithreading environment?
33. SOLID principles.
34. Advantages and disadvantages of singleton pattern.
35. Mention some scenarios where abstract classes are required over interfaces(for Java 8+).
36. Design a coffee machine.
37. How do you manage resource sharing in multithreading?
38. What is LinkedBlockingQueue in Java?
39. Explain OOPS concepts.
40. What are different types of polymorphism?
41. Which is compile time polymorphism and which is dynamic? (Overriding/Overloading)
42. Can we override main method?
43. Can we overload main method?
44. How do we disable autoconfiguration in class in Springboot?
45. Write a program to identify loop in a linkedlist.
46. Write a custom implementation of creating threadpool.
47. Write a program to find pair of numbers from an integer array whose sum is closest to 0.
48. Write a program to count number of squares present in a mxn matrix.
49. How will you identify the bottleneck in a microservice architecture if memory usage
    is very high.
50. Design a producer consumer implementation using BlockingQueues.
51. Advantage of using Docker over traditional deployment techniques.
52. Advantage of using Kubernetes.
53. What is probing?
54. Reasons for selecting NoSQL and SQL databases in a project.
55. Read and write operations faster on which database SQL or NoSQL? Explain Why.
56. Give examples of inner join and outer join.
57. Explain the http protocols when a url is accessed from browser.
58. Who provides IP address to url mapping?
59. How does browser knows which DNS to look for when a url is hit?
60. What is default port in a server?
61. What is symmetric encryption and asymmetric encryption?
62. Explain @SpringBootApplication annotation.
63. Which annotation is used to enable spring security.
64. Why do we need spring security.
65. What is the use of @RestControllerAdvice annotation.
66. How does OAuth works?
67. How ArrayList works internally?
68. Explain working of ConcurrentHashMap.
69. What will happen if two keys generate the same hashcode?
70. Which exception is thrown in case of hashcode collision?
71. What is profiling in SpringBoot?
72. Why do we need @Value annotation?
73. How do we connect to multiple databases from a SpringBoot application?
74. What is streams in Java 8?
75. Advantages of Stream API.
76. intermediate vs terminal operations.
77. PathParam vs RequestParam?
78. What are stereotype annotations in SpringBoot?
79. Connection pooling API.
80. @Bean vs @Component annotations.
81. Which annotation used for role based authorization.
82. Explain REST architecture.
83. Hashing algorithm.
84. Can @Transactional be used in a private method?
85. How will you secure an endpoint.
86. What is service discovery?
87. How do you group a list of objects using stream API?
88. How to change default embedded web-server in a springboot application.
89. Explain Java memory management.
90. How @Transactional works internally?
91. Explain 'state' in REST.
92. What are path param and query param?
93. What are new features added in Java 17?
94. When do we use ForkJoinPool?
95. Explain Executors.
96. Explain Future objects in java.

==========================================================================================
BiConsumer
enum in depth
IllegalMonitorStateException
Chained Exceptions?
reduce operation in Streams

Controller vs RestController
    RestController creates controllers for rest API's which can return response as JSON body. Return value
is bound to response body and no view layer is required. @RestController is a meta annotation and is a combination
of @Controller and @RequestBody annotations.

CommandLineRunner in Springboot
